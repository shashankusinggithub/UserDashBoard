// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  username       String   @unique
  email          String   @unique
  password       String
  firstName      String
  lastName       String
  profilePicture String?
  bio            String?
  lastLoginTime  DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  posts    Post[]
  comments Comment[]
  likes    Like[]

  sentFriendRequests     FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")

  friends  User[] @relation("UserFriends")
  friendOf User[] @relation("UserFriends")

  conversations ConversationParticipant[]
  messages      Message[]

  notifications Notification[]

  @@map("users")
}

model Post {
  id        String   @id @default(uuid())
  content   String
  imageUrl  String?
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments Comment[]
  likes    Like[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("likes")
}

model FriendRequest {
  id         String              @id @default(uuid())
  senderId   String
  sender     User                @relation("SentFriendRequests", fields: [senderId], references: [id])
  receiverId String
  receiver   User                @relation("ReceivedFriendRequests", fields: [receiverId], references: [id])
  status     FriendRequestStatus @default(PENDING)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  @@unique([senderId, receiverId])
  @@map("friend_requests")
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Conversation {
  id        String   @id @default(uuid())
  name      String? // For group conversations
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participants ConversationParticipant[]
  messages     Message[]

  @@map("conversations")
}

model ConversationParticipant {
  id             String       @id @default(uuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  joinedAt       DateTime     @default(now())

  @@unique([userId, conversationId])
  @@map("conversation_participants")
}

model Message {
  id             String       @id @default(uuid())
  content        String
  senderId       String
  sender         User         @relation(fields: [senderId], references: [id])
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  createdAt      DateTime     @default(now())

  @@map("messages")
}

model Notification {
  id        String           @id @default(uuid())
  type      NotificationType
  content   String
  userId    String
  user      User             @relation(fields: [userId], references: [id])
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())

  @@map("notifications")
}

enum NotificationType {
  FRIEND_REQUEST
  FRIEND_ACCEPT
  NEW_POST
  NEW_COMMENT
  NEW_LIKE
  NEW_MESSAGE
}
